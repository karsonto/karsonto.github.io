<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【原创】Nacos 整合Prometheus+Grafana</title>
      <link href="/2023/11/25/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91Nacos-%E6%95%B4%E5%90%88Prometheus-Grafana/"/>
      <url>/2023/11/25/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91Nacos-%E6%95%B4%E5%90%88Prometheus-Grafana/</url>
      
        <content type="html"><![CDATA[<h1 id="Nacos-整合-Prometheus-Grafana"><a href="#Nacos-整合-Prometheus-Grafana" class="headerlink" title="Nacos 整合 Prometheus+Grafana"></a>Nacos 整合 Prometheus+Grafana</h1><p>Nacos 2.2.0 开始已经支持 Prometheus Http 服务发现，官网文档一直没有更新，所以动手整合一下，让小伙伴们以作参考</p><img src="nacos-2.2.0.png" width="100%" height="100%"/><h2 id="安装-Nacos"><a href="#安装-Nacos" class="headerlink" title="安装 Nacos"></a>安装 Nacos</h2><p><a href="https://nacos.io/zh-cn/docs/v2/quickstart/quick-start.html">参考官方文档</a></p><div class="tabs" id="安装方法"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="安装方法-1">下载安装包</button><button type="button" class="tab " data-href="安装方法-2">下载源码编译</button></ul><div class="tab-contents"><div class="tab-item-content active" id="安装方法-1"><p>您可以从 <a href="https://github.com/alibaba/nacos/releases">最新稳定版本</a> 下载 nacos-server-$version.zip 包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip nacos-server-$version.zip 或者 tar -xvf nacos-server-$version.tar.gz</span><br><span class="line">cd nacos/bin</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="安装方法-2"><p>从 Github 上下载源码方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/alibaba/nacos.git</span><br><span class="line">cd nacos/</span><br><span class="line">mvn -Prelease-nacos -Dmaven.test.skip=true clean install -U</span><br><span class="line">ls -al distribution/target/</span><br><span class="line"></span><br><span class="line">// change the $version to your actual path</span><br><span class="line">cd distribution/target/nacos-server-$version/nacos/bin</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>修改 conf 目录下的 application.properties 文件，开启 prometheus http sd 支持</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nacos.prometheus.metrics.enabled=true</span><br></pre></td></tr></table></figure><h2 id="启动-Nacos"><a href="#启动-Nacos" class="headerlink" title="启动 Nacos"></a>启动 Nacos</h2><div class="tabs" id="启动nacos"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="启动nacos-1">Windows</button><button type="button" class="tab " data-href="启动nacos-2">Linux/Unix/Mac</button></ul><div class="tab-contents"><div class="tab-item-content active" id="启动nacos-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="启动nacos-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="编写客户端测试"><a href="#编写客户端测试" class="headerlink" title="编写客户端测试"></a>编写客户端测试</h2><p>Nacos 已经支持 Rust SDK，感谢社区大佬<a href="https://github.com/onewe">onewe</a> 、<a href="https://github.com/CherishCai">CherishCai</a>以及多位的贡献<br>博主不会 Rust，参考大佬们代码，硬着头皮来一发<br>**<em>前提</em>**请先安装 Rust 环境以及 Cargo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cargo new nacos_example</span><br><span class="line">cd nacos_example/</span><br><span class="line">vi Cargo.toml</span><br></pre></td></tr></table></figure><p>添加 Rust 依赖</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> [dependencies]</span><br><span class="line">nacos-sdk = &#123; version = &quot;0.3&quot;, features = [&quot;default&quot;] &#125;</span><br><span class="line">tracing-subscriber = &quot;0.3&quot;</span><br><span class="line">tracing = &quot;0.1&quot;</span><br></pre></td></tr></table></figure><p>编写代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">vi main.rs</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;thread, time&#125;;</span><br><span class="line"><span class="keyword">use</span> nacos_sdk::api::constants;</span><br><span class="line"><span class="keyword">use</span> nacos_sdk::api::naming::&#123;</span><br><span class="line">    NamingChangeEvent, NamingEventListener, NamingService, NamingServiceBuilder, ServiceInstance,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">use</span> nacos_sdk::api::props::ClientProps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NACOS_ADDRESS: &amp;<span class="type">str</span> = <span class="string">&quot;127.0.0.1:8848&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">Box</span>&lt;<span class="keyword">dyn</span> std::error::Error&gt;&gt;  &#123;</span><br><span class="line">    tracing_subscriber::<span class="title function_ invoke__">fmt</span>()</span><br><span class="line">        <span class="comment">// all spans/events with a level higher than TRACE (e.g, info, warn, etc.)</span></span><br><span class="line">        <span class="comment">// will be written to stdout.</span></span><br><span class="line">        .<span class="title function_ invoke__">with_max_level</span>(tracing::Level::DEBUG)</span><br><span class="line">        .<span class="title function_ invoke__">with_thread_names</span>(<span class="literal">true</span>)</span><br><span class="line">        .<span class="title function_ invoke__">with_thread_ids</span>(<span class="literal">true</span>)</span><br><span class="line">        <span class="comment">// sets this to be the default, global collector for this application.</span></span><br><span class="line">        .<span class="title function_ invoke__">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">client_props</span> = ClientProps::<span class="title function_ invoke__">new</span>()</span><br><span class="line">        .<span class="title function_ invoke__">server_addr</span>(NACOS_ADDRESS)</span><br><span class="line">        <span class="comment">// .remote_grpc_port(9838)</span></span><br><span class="line">        <span class="comment">// Attention! &quot;public&quot; is &quot;&quot;, it is recommended to customize the namespace with clear meaning.</span></span><br><span class="line">        .<span class="title function_ invoke__">namespace</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">app_name</span>(<span class="string">&quot;karson_app&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">auth_username</span>(<span class="string">&quot;nacos&quot;</span>) <span class="comment">// TODO You can choose not to enable auth</span></span><br><span class="line">        .<span class="title function_ invoke__">auth_password</span>(<span class="string">&quot;nacos&quot;</span>) <span class="comment">// TODO You can choose not to enable auth</span></span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------  Naming  -------------</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">naming_service</span> = NamingServiceBuilder::<span class="title function_ invoke__">new</span>(client_props)</span><br><span class="line">        .<span class="title function_ invoke__">enable_auth_plugin_http</span>() <span class="comment">// TODO You can choose not to enable auth</span></span><br><span class="line">        .<span class="title function_ invoke__">build</span>()?;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">listener</span> = std::sync::Arc::<span class="title function_ invoke__">new</span>(SimpleInstanceChangeListener);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">_subscribe_ret</span> = naming_service.<span class="title function_ invoke__">subscribe</span>(</span><br><span class="line">        <span class="string">&quot;karson-service&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(constants::DEFAULT_GROUP.<span class="title function_ invoke__">to_string</span>()),</span><br><span class="line">        <span class="type">Vec</span>::<span class="title function_ invoke__">default</span>(),</span><br><span class="line">        listener,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">service_instance1</span> = ServiceInstance &#123;</span><br><span class="line">        ip: <span class="string">&quot;127.0.0.1&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">        port: <span class="number">9090</span>,</span><br><span class="line">        ..<span class="built_in">Default</span>::<span class="title function_ invoke__">default</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">_register_instance_ret</span> = naming_service.<span class="title function_ invoke__">batch_register_instance</span>(</span><br><span class="line">        <span class="string">&quot;karson-service&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(constants::DEFAULT_GROUP.<span class="title function_ invoke__">to_string</span>()),</span><br><span class="line">        <span class="built_in">vec!</span>[service_instance1],</span><br><span class="line">    );</span><br><span class="line">    thread::<span class="title function_ invoke__">sleep</span>(time::Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">100000000</span>));</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">SimpleInstanceChangeListener</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">NamingEventListener</span> <span class="keyword">for</span> <span class="title class_">SimpleInstanceChangeListener</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">event</span>(&amp;<span class="keyword">self</span>, event: std::sync::Arc&lt;NamingChangeEvent&gt;) &#123;</span><br><span class="line">        tracing::info!(<span class="string">&quot;subscriber notify: &#123;:?&#125;&quot;</span>, event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行项目代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cargo run</span><br></pre></td></tr></table></figure><img src="cargo_run.png" width="100%" height="100%"/><p>访问 Nacos</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8848/nacos</span><br></pre></td></tr></table></figure><img src="nacos_services.png" width="100%" height="100%"/><p>服务正常注册</p><h2 id="安装运行-Prometheus-docker-版"><a href="#安装运行-Prometheus-docker-版" class="headerlink" title="安装运行 Prometheus(docker 版)"></a>安装运行 Prometheus(docker 版)</h2><p>新建目录 prometheus，编辑配置文件 prometheus.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/prometheus</span><br><span class="line">cd ~/prometheus/</span><br><span class="line">vim prometheus.yml</span><br></pre></td></tr></table></figure><p>内容如下:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">http_sd_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">&quot;http://host.docker.internal:8848/nacos/prometheus&quot;</span></span><br></pre></td></tr></table></figure><p>为了方便测试，Nacos 配置指向宿主 Host</p><p>启动 prometheus</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -d -p 9090:9090  -v ~/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus</span><br></pre></td></tr></table></figure><p>访问 url :</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:9090/</span><br></pre></td></tr></table></figure><img src="prometheus_startup.png" width="100%" height="100%"/>Prometheus 启动正常访问url :<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:9090/service-discovery</span><br></pre></td></tr></table></figure><img src="prometheus_sd.png" width="100%" height="100%"/>Nacos 整合Prometheus SD 完毕<h3 id="安装并启动-Grafana-docker-版"><a href="#安装并启动-Grafana-docker-版" class="headerlink" title="安装并启动 Grafana(docker 版)"></a>安装并启动 Grafana(docker 版)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:3000 --name=grafana grafana/grafana</span><br></pre></td></tr></table></figure><p>默认用户 admin，密码 admin<br><img src="grafana_startup.png" width="100%" height="100%"/><br>选择添加数据库并选择 Prometheus<br><img src="grafana_datasource.png" width="100%" height="100%"/><br><img src="grafana_prometheus.png" width="100%" height="100%"/><br>URL 输入<a href="http://host.docker.internal:9090/">http://host.docker.internal:9090</a> 并保存<br><img src="prometheus_url.png" width="100%" height="100%"/></p><p>到此，Nacos 整合 Prometheus+Grafana 完毕，后续客户端应用自己实现埋点并提供&#x2F;metrics 接口暴露数据</p>]]></content>
      
      
      
        <tags>
            
            <tag> Nacos </tag>
            
            <tag> Prometheus </tag>
            
            <tag> Grafana </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
